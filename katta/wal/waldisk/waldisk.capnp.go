// Code generated by capnpc-go. DO NOT EDIT.

package waldisk

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Header capnp.Struct

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xa0d480a46586166c

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Header(st), err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Header(st), err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.Root()
	return Header(root.Struct()), err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xa0d480a46586166c, capnp.Struct(s))
	return str
}

func (s Header) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Header) DecodeFromPtr(p capnp.Ptr) Header {
	return Header(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Header) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Header) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Header) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Header) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Header) Magic() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Header) HasMagic() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Header) MagicBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Header) SetMagic(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Header) FileVersion() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Header) SetFileVersion(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Header_List is a list of Header.
type Header_List = capnp.StructList[Header]

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Header](l), err
}

// Header_Future is a wrapper for a Header promised by a client call.
type Header_Future struct{ *capnp.Future }

func (f Header_Future) Struct() (Header, error) {
	p, err := f.Future.Ptr()
	return Header(p.Struct()), err
}

type Entry capnp.Struct

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0x8a7eb8fba9de3623

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry(st), err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Entry(st), err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.Root()
	return Entry(root.Struct()), err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0x8a7eb8fba9de3623, capnp.Struct(s))
	return str
}

func (s Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Entry) DecodeFromPtr(p capnp.Ptr) Entry {
	return Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Entry) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Entry) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Entry) Val() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Entry) HasVal() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Entry) SetVal(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Entry_List is a list of Entry.
type Entry_List = capnp.StructList[Entry]

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Entry](l), err
}

// Entry_Future is a wrapper for a Entry promised by a client call.
type Entry_Future struct{ *capnp.Future }

func (f Entry_Future) Struct() (Entry, error) {
	p, err := f.Future.Ptr()
	return Entry(p.Struct()), err
}

const schema_85d3acc39d94e0f9 = "x\xda\x12\xe8w`1\xe4\x15gb`\x0a\x94`e" +
	"\xfb\xaflvo\xe5\xef\x1du]\x0c\x82|\x8c\xff\x7f" +
	">\x982\xf7\xf0\x9a\xcb\xad\x0c\xacL\xec\x0c\x0c\x82\x1f" +
	"\x17\x09\xfe\x04\xd1_\xcb\x19\x18\xff\xe7\x88\xb5\xa5.i" +
	"\xb8\xb2\x80!\x90\x8f\x11Y%#;\x03\x83p \xe3" +
	"*\xe1H0+\x94\xb1\x9cA\xf7\x7fybNJf" +
	"q\xb6\x1ecrbA^\x81\x95k\x1e{IQe" +
	"\x00#c \x073\x0b\x03\x03\x0b#\x03\x83\xa0\xa6\x12" +
	"\x03C\xa0\x0a3c\xa0\x01\x13\xa3 #\xa3\x08#H" +
	"P\x17$\xa8\xc1\xcc\x18h\xc2\xc4\xc8\x9e\x9dZ\xc9\xc8" +
	"\xc3\xc0\xc4\xc8\xc3\xc0\xc8^\x96\x98\xc3\xc8\xcb\xc0\xc4\xc8" +
	"\xcb\xc0\x88n\xb8G*\x7fbJj\x11\x9a\xe9F\x08" +
	"\xd3\xe1\x86'10\x04\xea03\x06Z01\xca\xe7" +
	"&\xa6g&\xc3\x8c\xff\x9f\x96\x99\x93\x1a\x96ZT\xcc" +
	"\xc0\x9e\x99\x9f\xc7\xc8\xc2\xc0\xc4\xc8\xc2\xc0\x08\x08\x00\x00" +
	"\xff\xff)oD\xc0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_85d3acc39d94e0f9,
		Nodes: []uint64{
			0x8a7eb8fba9de3623,
			0xa0d480a46586166c,
		},
		Compressed: true,
	})
}
