// Code generated by capnpc-go. DO NOT EDIT.

package indexdisk

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Entry capnp.Struct

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xd3fd1c4aba3152ec

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Entry(st), err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Entry(st), err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.Root()
	return Entry(root.Struct()), err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xd3fd1c4aba3152ec, capnp.Struct(s))
	return str
}

func (s Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Entry) DecodeFromPtr(p capnp.Ptr) Entry {
	return Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Entry) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Entry) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Entry) Off() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Entry) SetOff(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Entry_List is a list of Entry.
type Entry_List = capnp.StructList[Entry]

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Entry](l), err
}

// Entry_Future is a wrapper for a Entry promised by a client call.
type Entry_Future struct{ *capnp.Future }

func (f Entry_Future) Struct() (Entry, error) {
	p, err := f.Future.Ptr()
	return Entry(p.Struct()), err
}

const schema_bffa186e7c6662d0 = "x\xda\x12Hp`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\xffM\x90\xe1./\x99\xbf\x97\x19\x02\x05\x18\x19\xff" +
	"_HJ\xab\xc9\x93\xf8\xb5\x9f\x81\x95\x91\x9d\x81A\xf0" +
	"\xe8&\xc1\xb3 \xfad9\x83\xee\xff\xcc\xbc\x94\xd4\x8a" +
	"\x94\xccb\xc6l\xbd\xe4\xc4\x82\xbc\x02+y\xd7\xbc\x92" +
	"\xa2\xca\x00F\xc6@\x0ef\x16\x06\x06\x16F\x06\x06A" +
	"M%\x06\x86@\x15f\xc6@\x03&FFF\x11F" +
	"\x90\x98.HL\x83\x991\xd0\x84\x89\x91=;\xb5\x92" +
	"\x91\x87\x81\x89\x91\x87\x81\x91=?-\x8d\x91\x95\x81\x89" +
	"\x91\x95\x81\x11\x10\x00\x00\xff\xff\x19\xa7 \xe9"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bffa186e7c6662d0,
		Nodes: []uint64{
			0xd3fd1c4aba3152ec,
		},
		Compressed: true,
	})
}
